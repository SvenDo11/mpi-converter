    INFO: 2023-06-26 18:19:44,123:               log.py:   20: Logging to /home/sven/Projects/mpi-converter/other/mdpdf.log
   DEBUG: 2023-06-26 18:19:44,123:               cli.py:  103: Instructions.md
    INFO: 2023-06-26 18:19:44,123:         converter.py:   14: Instructions.md
   DEBUG: 2023-06-26 18:19:44,127:      pdf_renderer.py:  470: printSegment: Instructions for the User Survey for the Master Thesis 
   DEBUG: 2023-06-26 18:19:44,128:      pdf_renderer.py:  470: printSegment: "
   DEBUG: 2023-06-26 18:19:44,128:      pdf_renderer.py:  470: printSegment: An IDE
   DEBUG: 2023-06-26 18:19:44,128:      pdf_renderer.py:  470: printSegment: Plugin for Automatic MPI Code Modernisation
   DEBUG: 2023-06-26 18:19:44,128:      pdf_renderer.py:  470: printSegment: "
   DEBUG: 2023-06-26 18:19:44,129:      pdf_renderer.py:  470: printSegment: 1. Requirement
   DEBUG: 2023-06-26 18:19:44,129:      pdf_renderer.py:  470: printSegment: You need the following programs to participate in this Survey:
   DEBUG: 2023-06-26 18:19:44,130:      pdf_renderer.py:  470: printSegment: l
   DEBUG: 2023-06-26 18:19:44,130:      pdf_renderer.py:  470: printSegment: Visual Studio Code
   DEBUG: 2023-06-26 18:19:44,130:      pdf_renderer.py:  470: printSegment: l
   DEBUG: 2023-06-26 18:19:44,130:      pdf_renderer.py:  470: printSegment: A C++ Compiler, for example 
   DEBUG: 2023-06-26 18:19:44,130:      pdf_renderer.py:  470: printSegment: gcc
   DEBUG: 2023-06-26 18:19:44,130:      pdf_renderer.py:  470: printSegment: l
   DEBUG: 2023-06-26 18:19:44,131:      pdf_renderer.py:  470: printSegment: A MPI library, for example 
   DEBUG: 2023-06-26 18:19:44,131:      pdf_renderer.py:  470: printSegment: OpenMPI
   DEBUG: 2023-06-26 18:19:44,131:      pdf_renderer.py:  470: printSegment: Instalation:
   DEBUG: 2023-06-26 18:19:44,131:      pdf_renderer.py:  470: printSegment: Windows
   DEBUG: 2023-06-26 18:19:44,131:      pdf_renderer.py:  470: printSegment:  1 
   DEBUG: 2023-06-26 18:19:44,131:      pdf_renderer.py:  470: printSegment: Download and install Visual Studio Code from 
   DEBUG: 2023-06-26 18:19:44,131:      pdf_renderer.py:  470: printSegment: here
   DEBUG: 2023-06-26 18:19:44,132:      pdf_renderer.py:  470: printSegment:  2 
   DEBUG: 2023-06-26 18:19:44,132:      pdf_renderer.py:  470: printSegment: Install a C++ compiler and a MPI library. If you already have a c++ compiler and a MPI library
   DEBUG: 2023-06-26 18:19:44,132:      pdf_renderer.py:  470: printSegment: continue with step 
   DEBUG: 2023-06-26 18:19:44,132:      pdf_renderer.py:  470: printSegment: [
   DEBUG: 2023-06-26 18:19:44,132:      pdf_renderer.py:  470: printSegment: 3
   DEBUG: 2023-06-26 18:19:44,132:      pdf_renderer.py:  470: printSegment: ]
   DEBUG: 2023-06-26 18:19:44,132:      pdf_renderer.py:  470: printSegment: .
   DEBUG: 2023-06-26 18:19:44,132:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-06-26 18:19:44,132:      pdf_renderer.py:  470: printSegment: Otherwise we recomend using 
   DEBUG: 2023-06-26 18:19:44,132:      pdf_renderer.py:  470: printSegment: Windows Subsystem for Linux
   DEBUG: 2023-06-26 18:19:44,133:      pdf_renderer.py:  470: printSegment: .
   DEBUG: 2023-06-26 18:19:44,133:      pdf_renderer.py:  470: printSegment:  1 
   DEBUG: 2023-06-26 18:19:44,133:      pdf_renderer.py:  470: printSegment: Open the Windows PowerShell as administrator.
   DEBUG: 2023-06-26 18:19:44,133:      pdf_renderer.py:  235: /home/sven/Projects/mpi-converter/other/media/powershell_admin.png, 783, 642
   DEBUG: 2023-06-26 18:19:44,147:      pdf_renderer.py:  470: printSegment:  2 
   DEBUG: 2023-06-26 18:19:44,147:      pdf_renderer.py:  470: printSegment: Execute the command 
   DEBUG: 2023-06-26 18:19:44,148:      pdf_renderer.py:  470: printSegment: wsl --install
   DEBUG: 2023-06-26 18:19:44,148:      pdf_renderer.py:  470: printSegment:  in the PowerShell
   DEBUG: 2023-06-26 18:19:44,149:      pdf_renderer.py:  470: printSegment:  3 
   DEBUG: 2023-06-26 18:19:44,149:      pdf_renderer.py:  470: printSegment: The installation will take a few minutes.
   DEBUG: 2023-06-26 18:19:44,149:      pdf_renderer.py:  470: printSegment:  4 
   DEBUG: 2023-06-26 18:19:44,149:      pdf_renderer.py:  470: printSegment: After the installation is done, reboot the Computer.
   DEBUG: 2023-06-26 18:19:44,149:      pdf_renderer.py:  470: printSegment:  5 
   DEBUG: 2023-06-26 18:19:44,149:      pdf_renderer.py:  470: printSegment: A Ubuntu window should open automatically and the intstallation will be continue.
   DEBUG: 2023-06-26 18:19:44,149:      pdf_renderer.py:  470: printSegment:  6 
   DEBUG: 2023-06-26 18:19:44,149:      pdf_renderer.py:  470: printSegment: When asked, enter a username and a password, that will serve as login for the linux
   DEBUG: 2023-06-26 18:19:44,149:      pdf_renderer.py:  470: printSegment: subsystem.
   DEBUG: 2023-06-26 18:19:44,150:      pdf_renderer.py:  470: printSegment:  7 
   DEBUG: 2023-06-26 18:19:44,150:      pdf_renderer.py:  470: printSegment: After Ubuntu is done installing, install gcc and openMPI with the following
   DEBUG: 2023-06-26 18:19:44,150:      pdf_renderer.py:  470: printSegment: commands:
   DEBUG: 2023-06-26 18:19:44,150:      pdf_renderer.py:  470: printSegment: sudo apt-get update
   DEBUG: 2023-06-26 18:19:44,150:      pdf_renderer.py:  470: printSegment: sudo apt-get install gcc make openmpi-bin g++
   DEBUG: 2023-06-26 18:19:44,150:      pdf_renderer.py:  470: printSegment: libopenmpi-dev
   DEBUG: 2023-06-26 18:19:44,150:      pdf_renderer.py:  470: printSegment:  8 
   DEBUG: 2023-06-26 18:19:44,150:      pdf_renderer.py:  470: printSegment: Confirm installation with 
   DEBUG: 2023-06-26 18:19:44,150:      pdf_renderer.py:  470: printSegment: '
   DEBUG: 2023-06-26 18:19:44,151:      pdf_renderer.py:  470: printSegment: y
   DEBUG: 2023-06-26 18:19:44,151:      pdf_renderer.py:  470: printSegment: '
   DEBUG: 2023-06-26 18:19:44,151:      pdf_renderer.py:  470: printSegment:  9 
   DEBUG: 2023-06-26 18:19:44,151:      pdf_renderer.py:  470: printSegment: You now have a Ubuntu terminal, that can be used as a regular linux system. You
   DEBUG: 2023-06-26 18:19:44,151:      pdf_renderer.py:  470: printSegment: can also access this system, by typing 
   DEBUG: 2023-06-26 18:19:44,151:      pdf_renderer.py:  470: printSegment: wsl
   DEBUG: 2023-06-26 18:19:44,151:      pdf_renderer.py:  470: printSegment:  in the PowerShell.
   DEBUG: 2023-06-26 18:19:44,151:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-06-26 18:19:44,151:      pdf_renderer.py:  470: printSegment: You can use this in
   DEBUG: 2023-06-26 18:19:44,152:      pdf_renderer.py:  470: printSegment: the Visual Studio Code terminal to run the 
   DEBUG: 2023-06-26 18:19:44,152:      pdf_renderer.py:  470: printSegment: make
   DEBUG: 2023-06-26 18:19:44,152:      pdf_renderer.py:  470: printSegment:  commands necessary for this
   DEBUG: 2023-06-26 18:19:44,152:      pdf_renderer.py:  470: printSegment: survey. Use 
   DEBUG: 2023-06-26 18:19:44,152:      pdf_renderer.py:  470: printSegment: exit
   DEBUG: 2023-06-26 18:19:44,152:      pdf_renderer.py:  470: printSegment:  to return to the usual PowerShell.
   DEBUG: 2023-06-26 18:19:44,152:      pdf_renderer.py:  470: printSegment:  3 
   DEBUG: 2023-06-26 18:19:44,152:      pdf_renderer.py:  470: printSegment: Install the Visual Studio Code Plugin:
   DEBUG: 2023-06-26 18:19:44,152:      pdf_renderer.py:  470: printSegment:  1 
   DEBUG: 2023-06-26 18:19:44,153:      pdf_renderer.py:  470: printSegment: Open Visual Studio Code and navigate to the 
   DEBUG: 2023-06-26 18:19:44,153:      pdf_renderer.py:  470: printSegment: Extension
   DEBUG: 2023-06-26 18:19:44,154:      pdf_renderer.py:  470: printSegment:  tab in the 
   DEBUG: 2023-06-26 18:19:44,154:      pdf_renderer.py:  470: printSegment: Activity Panel
   DEBUG: 2023-06-26 18:19:44,154:      pdf_renderer.py:  470: printSegment:  2 
   DEBUG: 2023-06-26 18:19:44,154:      pdf_renderer.py:  470: printSegment: If you allready have some Extensions installed, you may want to disable them, as
   DEBUG: 2023-06-26 18:19:44,154:      pdf_renderer.py:  470: printSegment: they can interfere with our plugin. You can disable all extensions in the options
   DEBUG: 2023-06-26 18:19:44,155:      pdf_renderer.py:  470: printSegment: menu ...
   DEBUG: 2023-06-26 18:19:44,155:      pdf_renderer.py:  470: printSegment:  3 
   DEBUG: 2023-06-26 18:19:44,155:      pdf_renderer.py:  470: printSegment: Open the options menu by clicking ...
   DEBUG: 2023-06-26 18:19:44,155:      pdf_renderer.py:  470: printSegment:  4 
   DEBUG: 2023-06-26 18:19:44,155:      pdf_renderer.py:  470: printSegment: Select 
   DEBUG: 2023-06-26 18:19:44,155:      pdf_renderer.py:  470: printSegment: Install from VSIX
   DEBUG: 2023-06-26 18:19:44,156:      pdf_renderer.py:  235: /home/sven/Projects/mpi-converter/other/media/vsix.png, 559, 472
   DEBUG: 2023-06-26 18:19:44,162:      pdf_renderer.py:  470: printSegment:  5 
   DEBUG: 2023-06-26 18:19:44,162:      pdf_renderer.py:  470: printSegment: Locate and select the provided 
   DEBUG: 2023-06-26 18:19:44,162:      pdf_renderer.py:  470: printSegment: mpiconv-0.0.X.vsix
   DEBUG: 2023-06-26 18:19:44,162:      pdf_renderer.py:  470: printSegment:  file.
   DEBUG: 2023-06-26 18:19:44,162:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-06-26 18:19:44,163:      pdf_renderer.py:  470: printSegment: You may have to
   DEBUG: 2023-06-26 18:19:44,163:      pdf_renderer.py:  470: printSegment: acknowledge, that you trust the author of this extension, please do so.
   DEBUG: 2023-06-26 18:19:44,163:      pdf_renderer.py:  470: printSegment: Linux
   DEBUG: 2023-06-26 18:19:44,163:      pdf_renderer.py:  470: printSegment:  1 
   DEBUG: 2023-06-26 18:19:44,163:      pdf_renderer.py:  470: printSegment: Download and install Visual Studio Code from 
   DEBUG: 2023-06-26 18:19:44,163:      pdf_renderer.py:  470: printSegment: here
   DEBUG: 2023-06-26 18:19:44,163:      pdf_renderer.py:  470: printSegment: .
   DEBUG: 2023-06-26 18:19:44,164:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-06-26 18:19:44,164:      pdf_renderer.py:  470: printSegment: Note that many package manager allready
   DEBUG: 2023-06-26 18:19:44,164:      pdf_renderer.py:  470: printSegment: provide visual studio code, so you can install it with that.
   DEBUG: 2023-06-26 18:19:44,164:      pdf_renderer.py:  470: printSegment:  2 
   DEBUG: 2023-06-26 18:19:44,164:      pdf_renderer.py:  470: printSegment: If you do not have a C++ Compiler, MPI Library or Make, install them from the package manager or
   DEBUG: 2023-06-26 18:19:44,164:      pdf_renderer.py:  470: printSegment: by downloading from the websides.
   DEBUG: 2023-06-26 18:19:44,164:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-06-26 18:19:44,164:      pdf_renderer.py:  470: printSegment: Here are some package manager commands: - Ubuntu/Debian: 
   DEBUG: 2023-06-26 18:19:44,165:      pdf_renderer.py:  470: printSegment: sudo apt-get install gcc make openmpi-bin g++ libopenmpi-dev
   DEBUG: 2023-06-26 18:19:44,165:      pdf_renderer.py:  470: printSegment:  - Arch: 
   DEBUG: 2023-06-26 18:19:44,165:      pdf_renderer.py:  470: printSegment: sudo pacman -S gcc make openmpi
   DEBUG: 2023-06-26 18:19:44,165:      pdf_renderer.py:  470: printSegment:  3 
   DEBUG: 2023-06-26 18:19:44,165:      pdf_renderer.py:  470: printSegment: Install the Visual Studio Code Plugin:
   DEBUG: 2023-06-26 18:19:44,165:      pdf_renderer.py:  470: printSegment:  1 
   DEBUG: 2023-06-26 18:19:44,165:      pdf_renderer.py:  470: printSegment: Open Visual Studio Code and navigate to the 
   DEBUG: 2023-06-26 18:19:44,166:      pdf_renderer.py:  470: printSegment: Extension
   DEBUG: 2023-06-26 18:19:44,166:      pdf_renderer.py:  470: printSegment:  tab in the 
   DEBUG: 2023-06-26 18:19:44,166:      pdf_renderer.py:  470: printSegment: Activity Panel
   DEBUG: 2023-06-26 18:19:44,166:      pdf_renderer.py:  470: printSegment:  2 
   DEBUG: 2023-06-26 18:19:44,166:      pdf_renderer.py:  470: printSegment: If you allready have some Extensions installed, you may want to disable them, as
   DEBUG: 2023-06-26 18:19:44,166:      pdf_renderer.py:  470: printSegment: they can interfere with our plugin. You can disable all extensions in the options
   DEBUG: 2023-06-26 18:19:44,167:      pdf_renderer.py:  470: printSegment: menu ...
   DEBUG: 2023-06-26 18:19:44,167:      pdf_renderer.py:  470: printSegment:  3 
   DEBUG: 2023-06-26 18:19:44,167:      pdf_renderer.py:  470: printSegment: Open the options menu by clicking ...
   DEBUG: 2023-06-26 18:19:44,167:      pdf_renderer.py:  470: printSegment:  4 
   DEBUG: 2023-06-26 18:19:44,167:      pdf_renderer.py:  470: printSegment: Select 
   DEBUG: 2023-06-26 18:19:44,167:      pdf_renderer.py:  470: printSegment: Install from VSIX
   DEBUG: 2023-06-26 18:19:44,168:      pdf_renderer.py:  235: /home/sven/Projects/mpi-converter/other/media/vsix.png, 559, 472
   DEBUG: 2023-06-26 18:19:44,168:      pdf_renderer.py:  470: printSegment:  5 
   DEBUG: 2023-06-26 18:19:44,168:      pdf_renderer.py:  470: printSegment: Locate and select the provided 
   DEBUG: 2023-06-26 18:19:44,168:      pdf_renderer.py:  470: printSegment: mpiconv-0.0.X.vsix
   DEBUG: 2023-06-26 18:19:44,168:      pdf_renderer.py:  470: printSegment:  file.
   DEBUG: 2023-06-26 18:19:44,168:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-06-26 18:19:44,168:      pdf_renderer.py:  470: printSegment: You may have to
   DEBUG: 2023-06-26 18:19:44,168:      pdf_renderer.py:  470: printSegment: acknowledge, that you trust the author of this extension, please do so.
   DEBUG: 2023-06-26 18:19:44,169:      pdf_renderer.py:  470: printSegment: 2. Testing the Plugin
   DEBUG: 2023-06-26 18:19:44,169:      pdf_renderer.py:  470: printSegment:  1 
   DEBUG: 2023-06-26 18:19:44,169:      pdf_renderer.py:  470: printSegment: Open the provided folder 
   DEBUG: 2023-06-26 18:19:44,169:      pdf_renderer.py:  470: printSegment: exercise1
   DEBUG: 2023-06-26 18:19:44,169:      pdf_renderer.py:  470: printSegment:  in Visual Studio Code. You may have to acknowledge that you
   DEBUG: 2023-06-26 18:19:44,169:      pdf_renderer.py:  470: printSegment: trust the author, please do so.
   DEBUG: 2023-06-26 18:19:44,169:      pdf_renderer.py:  470: printSegment:  2 
   DEBUG: 2023-06-26 18:19:44,169:      pdf_renderer.py:  470: printSegment: Open the file 
   DEBUG: 2023-06-26 18:19:44,170:      pdf_renderer.py:  470: printSegment: exercise2.cpp
   DEBUG: 2023-06-26 18:19:44,170:      pdf_renderer.py:  470: printSegment:  3 
   DEBUG: 2023-06-26 18:19:44,170:      pdf_renderer.py:  470: printSegment: Make yourself comfortable with the code.
   DEBUG: 2023-06-26 18:19:44,170:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-06-26 18:19:44,170:      pdf_renderer.py:  470: printSegment: The program applies the function 
   DEBUG: 2023-06-26 18:19:44,170:      pdf_renderer.py:  470: printSegment: function
   DEBUG: 2023-06-26 18:19:44,170:      pdf_renderer.py:  470: printSegment:  to every
   DEBUG: 2023-06-26 18:19:44,170:      pdf_renderer.py:  470: printSegment: element of an array.
   DEBUG: 2023-06-26 18:19:44,170:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-06-26 18:19:44,171:      pdf_renderer.py:  470: printSegment: The array is distrbiuted onto multiple processes.
   DEBUG: 2023-06-26 18:19:44,171:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-06-26 18:19:44,171:      pdf_renderer.py:  470: printSegment: One of the processes is
   DEBUG: 2023-06-26 18:19:44,171:      pdf_renderer.py:  470: printSegment: assigned the master.
   DEBUG: 2023-06-26 18:19:44,171:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-06-26 18:19:44,171:      pdf_renderer.py:  470: printSegment: It initialises the array, and distriubtes the array to the worker processes.
   DEBUG: 2023-06-26 18:19:44,171:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-06-26 18:19:44,171:      pdf_renderer.py:  470: printSegment: It then
   DEBUG: 2023-06-26 18:19:44,171:      pdf_renderer.py:  470: printSegment: calculates its own intermediat result.
   DEBUG: 2023-06-26 18:19:44,172:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-06-26 18:19:44,172:      pdf_renderer.py:  470: printSegment: Next it combines all intermeditate results.
   DEBUG: 2023-06-26 18:19:44,172:      pdf_renderer.py:  470: printSegment: The other processes are worker.
   DEBUG: 2023-06-26 18:19:44,172:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-06-26 18:19:44,172:      pdf_renderer.py:  470: printSegment: They recieve their array partition and calculate their results.
   DEBUG: 2023-06-26 18:19:44,172:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-06-26 18:19:44,172:      pdf_renderer.py:  470: printSegment: They then send the
   DEBUG: 2023-06-26 18:19:44,173:      pdf_renderer.py:  470: printSegment: result to the master and are done.
   DEBUG: 2023-06-26 18:19:44,173:      pdf_renderer.py:  470: printSegment: Lastly the master process uses the function 
   DEBUG: 2023-06-26 18:19:44,173:      pdf_renderer.py:  470: printSegment: verify
   DEBUG: 2023-06-26 18:19:44,173:      pdf_renderer.py:  470: printSegment:  to make sure the distribution did deliver the correct result. If it was
   DEBUG: 2023-06-26 18:19:44,173:      pdf_renderer.py:  470: printSegment: correct or not, will then be written to the command line.
   DEBUG: 2023-06-26 18:19:44,173:      pdf_renderer.py:  470: printSegment:  4 
   DEBUG: 2023-06-26 18:19:44,173:      pdf_renderer.py:  470: printSegment: Test the program by running the following commands:
   DEBUG: 2023-06-26 18:19:44,174:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-06-26 18:19:44,174:      pdf_renderer.py:  470: printSegment: make all
   DEBUG: 2023-06-26 18:19:44,174:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-06-26 18:19:44,174:      pdf_renderer.py:  470: printSegment: make run
   DEBUG: 2023-06-26 18:19:44,174:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-06-26 18:19:44,174:      pdf_renderer.py:  470: printSegment: For this, you can
   DEBUG: 2023-06-26 18:19:44,174:      pdf_renderer.py:  470: printSegment: use the integrated terminal. Open a terminal by navigating to the terminal menu and clicking 
   DEBUG: 2023-06-26 18:19:44,175:      pdf_renderer.py:  470: printSegment: New
   DEBUG: 2023-06-26 18:19:44,175:      pdf_renderer.py:  470: printSegment: Terminal
   DEBUG: 2023-06-26 18:19:44,175:      pdf_renderer.py:  470: printSegment: . In windows this will open a PowerShell, in which you can run 
   DEBUG: 2023-06-26 18:19:44,175:      pdf_renderer.py:  470: printSegment: wsl
   DEBUG: 2023-06-26 18:19:44,175:      pdf_renderer.py:  470: printSegment:  to access the Linux
   DEBUG: 2023-06-26 18:19:44,175:      pdf_renderer.py:  470: printSegment: subsystem.
   DEBUG: 2023-06-26 18:19:44,175:      pdf_renderer.py:  470: printSegment:  5 
   DEBUG: 2023-06-26 18:19:44,175:      pdf_renderer.py:  470: printSegment: Now run the Plugin, by selection the MPI symbol in the Activity Panel (on the left), and then
   DEBUG: 2023-06-26 18:19:44,176:      pdf_renderer.py:  470: printSegment: clicking the green arrow. Alternativly you can open the run panel, by pressing 
   DEBUG: 2023-06-26 18:19:44,176:      pdf_renderer.py:  470: printSegment: "
   DEBUG: 2023-06-26 18:19:44,176:      pdf_renderer.py:  470: printSegment: ctrl
   DEBUG: 2023-06-26 18:19:44,176:      pdf_renderer.py:  470: printSegment:  + 
   DEBUG: 2023-06-26 18:19:44,176:      pdf_renderer.py:  470: printSegment: shift
   DEBUG: 2023-06-26 18:19:44,176:      pdf_renderer.py:  470: printSegment:  + 
   DEBUG: 2023-06-26 18:19:44,176:      pdf_renderer.py:  470: printSegment: p
   DEBUG: 2023-06-26 18:19:44,176:      pdf_renderer.py:  470: printSegment: "
   DEBUG: 2023-06-26 18:19:44,176:      pdf_renderer.py:  470: printSegment:  and
   DEBUG: 2023-06-26 18:19:44,177:      pdf_renderer.py:  470: printSegment: run 
   DEBUG: 2023-06-26 18:19:44,177:      pdf_renderer.py:  470: printSegment: "
   DEBUG: 2023-06-26 18:19:44,177:      pdf_renderer.py:  470: printSegment: Convert MPI Statements
   DEBUG: 2023-06-26 18:19:44,177:      pdf_renderer.py:  470: printSegment: "
   DEBUG: 2023-06-26 18:19:44,177:      pdf_renderer.py:  470: printSegment: .
   DEBUG: 2023-06-26 18:19:44,177:      pdf_renderer.py:  235: /home/sven/Projects/mpi-converter/other/media/run_plugin.png, 288, 343
   DEBUG: 2023-06-26 18:19:44,179:      pdf_renderer.py:  470: printSegment:  6 
   DEBUG: 2023-06-26 18:19:44,179:      pdf_renderer.py:  470: printSegment: The plugin will guide you trough the process with a set of dialog windows.
   DEBUG: 2023-06-26 18:19:44,180:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-06-26 18:19:44,180:      pdf_renderer.py:  470: printSegment: Please try to change all
   DEBUG: 2023-06-26 18:19:44,180:      pdf_renderer.py:  470: printSegment: four MPI send/recv instructions into non-blocking ones.
   DEBUG: 2023-06-26 18:19:44,180:      pdf_renderer.py:  470: printSegment:  7 
   DEBUG: 2023-06-26 18:19:44,180:      pdf_renderer.py:  470: printSegment: Test the result by running:
   DEBUG: 2023-06-26 18:19:44,180:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-06-26 18:19:44,180:      pdf_renderer.py:  470: printSegment: make all
   DEBUG: 2023-06-26 18:19:44,180:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-06-26 18:19:44,180:      pdf_renderer.py:  470: printSegment: make run
   DEBUG: 2023-06-26 18:19:44,181:      pdf_renderer.py:  470: printSegment:  8 
   DEBUG: 2023-06-26 18:19:44,181:      pdf_renderer.py:  470: printSegment: Should the programm not compile, or deliver the wrong result, try to fix the issue manually.
   DEBUG: 2023-06-26 18:19:44,181:      pdf_renderer.py:  470: printSegment:  9 
   DEBUG: 2023-06-26 18:19:44,181:      pdf_renderer.py:  470: printSegment: You may optionally repeat steps 1 to 8 with 
   DEBUG: 2023-06-26 18:19:44,181:      pdf_renderer.py:  470: printSegment: exercise2
   DEBUG: 2023-06-26 18:19:44,181:      pdf_renderer.py:  470: printSegment:  or one of your own MPI programs.
   DEBUG: 2023-06-26 18:19:44,181:      pdf_renderer.py:  470: printSegment: l
   DEBUG: 2023-06-26 18:19:44,181:      pdf_renderer.py:  470: printSegment: Note for 
   DEBUG: 2023-06-26 18:19:44,182:      pdf_renderer.py:  470: printSegment: exercise2
   DEBUG: 2023-06-26 18:19:44,182:      pdf_renderer.py:  470: printSegment: : You will find all relevant code in the file 
   DEBUG: 2023-06-26 18:19:44,182:      pdf_renderer.py:  470: printSegment: exercise2
   DEBUG: 2023-06-26 18:19:44,182:      pdf_renderer.py:  470: printSegment: . You can run 
   DEBUG: 2023-06-26 18:19:44,182:      pdf_renderer.py:  470: printSegment: make all
   DEBUG: 2023-06-26 18:19:44,182:      pdf_renderer.py:  470: printSegment:  and 
   DEBUG: 2023-06-26 18:19:44,182:      pdf_renderer.py:  470: printSegment: make run
   DEBUG: 2023-06-26 18:19:44,182:      pdf_renderer.py:  470: printSegment:  to test the program.
   DEBUG: 2023-06-26 18:19:44,182:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-06-26 18:19:44,183:      pdf_renderer.py:  470: printSegment: This exercise has more MPI
   DEBUG: 2023-06-26 18:19:44,183:      pdf_renderer.py:  470: printSegment: send/recv statements. You don
   DEBUG: 2023-06-26 18:19:44,183:      pdf_renderer.py:  470: printSegment: '
   DEBUG: 2023-06-26 18:19:44,183:      pdf_renderer.py:  470: printSegment: t have to turn every statement into an non-blocking
   DEBUG: 2023-06-26 18:19:44,183:      pdf_renderer.py:  470: printSegment: one.
   DEBUG: 2023-06-26 18:19:44,183:      pdf_renderer.py:  470: printSegment: This program calculates the Mandelbrot-set in a predefined space.
   DEBUG: 2023-06-26 18:19:44,183:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-06-26 18:19:44,183:      pdf_renderer.py:  470: printSegment: For this, one
   DEBUG: 2023-06-26 18:19:44,184:      pdf_renderer.py:  470: printSegment: process is selected as master. The master process sends a x-coordinate to every
   DEBUG: 2023-06-26 18:19:44,184:      pdf_renderer.py:  470: printSegment: worker. The worker calculates the hole row of y-coordinates for the x-coordinate
   DEBUG: 2023-06-26 18:19:44,184:      pdf_renderer.py:  470: printSegment: and return the row to the master.
   DEBUG: 2023-06-26 18:19:44,184:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-06-26 18:19:44,184:      pdf_renderer.py:  470: printSegment: The master will recieve the row and send back
   DEBUG: 2023-06-26 18:19:44,184:      pdf_renderer.py:  470: printSegment: another x-coordinate.
   DEBUG: 2023-06-26 18:19:44,185:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-06-26 18:19:44,185:      pdf_renderer.py:  470: printSegment: Then it will safe the row in a buffer.
   DEBUG: 2023-06-26 18:19:44,185:      pdf_renderer.py:  470: printSegment: After all rows are completed, the master will verify the result and safe the
   DEBUG: 2023-06-26 18:19:44,185:      pdf_renderer.py:  470: printSegment: Mandelbrot-set into a ppm picture.
   DEBUG: 2023-06-26 18:19:44,185:      pdf_renderer.py:  470: printSegment:  10 
   DEBUG: 2023-06-26 18:19:44,185:      pdf_renderer.py:  470: printSegment: If all instructions are replaced and the program passes the test, or if you can not fix the issues, please
   DEBUG: 2023-06-26 18:19:44,185:      pdf_renderer.py:  470: printSegment: continue with the survey, you can find 
   DEBUG: 2023-06-26 18:19:44,185:      pdf_renderer.py:  470: printSegment: here
   DEBUG: 2023-06-26 18:19:44,185:      pdf_renderer.py:  470: printSegment: *
   DEBUG: 2023-06-26 18:19:44,186:      pdf_renderer.py:  470: printSegment: Thank you for taking the time.
   DEBUG: 2023-06-26 18:19:44,186:      pdf_renderer.py:  470: printSegment:  
   DEBUG: 2023-06-26 18:19:44,186:      pdf_renderer.py:  470: printSegment: Your input and feedback is contributing to my thesis a lot.
   DEBUG: 2023-06-26 18:19:44,186:      pdf_renderer.py:  470: printSegment: If you have any questions or issues, contact me: sven.donnerhak@stud.tu-darmstadt.de
   DEBUG: 2023-06-26 18:19:44,186:      pdf_renderer.py:  470: printSegment: *
   DEBUG: 2023-06-26 18:19:44,186:      pdf_renderer.py:  470: printSegment:  Link: https://www.soscisurvey.de/MPIplugin2023/
   DEBUG: 2023-06-26 18:19:44,186:      pdf_renderer.py:   53: 0, [1, 'Instructions for the User Survey for the Master Thesis ', 1, 87.2]
   DEBUG: 2023-06-26 18:19:44,186:      pdf_renderer.py:   53: 1, [2, '1. Requirement', 1, 125.20000000000002]
   DEBUG: 2023-06-26 18:19:44,186:      pdf_renderer.py:   53: 2, [3, 'Instalation:', 1, 224.40000000000003]
   DEBUG: 2023-06-26 18:19:44,186:      pdf_renderer.py:   53: 3, [4, 'Windows', 1, 252.80000000000007]
   DEBUG: 2023-06-26 18:19:44,186:      pdf_renderer.py:   53: 4, [4, 'Linux', 3, 589.1627906976744]
   DEBUG: 2023-06-26 18:19:44,186:      pdf_renderer.py:   53: 5, [2, '2. Testing the Plugin', 4, 589.9627906976743]
